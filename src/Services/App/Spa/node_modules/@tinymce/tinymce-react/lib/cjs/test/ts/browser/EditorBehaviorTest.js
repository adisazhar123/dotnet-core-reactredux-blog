"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var agar_1 = require("@ephox/agar");
var bedrock_1 = require("@ephox/bedrock");
var Loader_1 = require("../alien/Loader");
var mcagar_1 = require("@ephox/mcagar");
var TinyMCE_1 = require("../../../main/ts/TinyMCE");
var TestHelpers_1 = require("../alien/TestHelpers");
bedrock_1.UnitTest.asynctest('Editor.test', function (success, failure) {
    var isEditor = function (val) {
        return val instanceof TinyMCE_1.getTinymce().Editor;
    };
    var eventState = TestHelpers_1.EventState();
    agar_1.Pipeline.async({}, [
        agar_1.Logger.t('Assert structure of tinymce and tinymce-react events', agar_1.Chain.asStep({}, [
            Loader_1.cRender({
                onEditorChange: eventState.createHandler('onEditorChange'),
                onSetContent: eventState.createHandler('onSetContent')
            }),
            Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>Initial Content</p>')),
            // tinymce native event
            eventState.cEach('onSetContent', function (args) { return agar_1.Assertions.assertEq('First arg should be event from Tiny', '<p>Initial Content</p>', args[0].content); }),
            eventState.cEach('onSetContent', function (args) { return agar_1.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            // tinymce-react unique event
            eventState.cEach('onEditorChange', function (args) { return agar_1.Assertions.assertEq('First arg should be new content', '<p>Initial Content</p>', args[0]); }),
            eventState.cEach('onEditorChange', function (args) { return agar_1.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            eventState.cClearState,
            Loader_1.cRemove
        ])),
        agar_1.Logger.t('Should be able to register an event handler after initial render', agar_1.Chain.asStep({}, [
            Loader_1.cRender({ initialValue: '<p>Initial Content</p>' }),
            Loader_1.cReRender({ onSetContent: eventState.createHandler('onSetContent') }),
            Loader_1.cEditor(mcagar_1.ApiChains.cAssertContent('<p>Initial Content</p>')),
            Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>New Content</p>')),
            eventState.cEach('onSetContent', function (args) { return agar_1.Assertions.assertEq('Should have bound handler, hence new content', '<p>New Content</p>', args[0].content); }),
            eventState.cClearState,
            Loader_1.cRemove
        ])),
        agar_1.Logger.t('Providing a new event handler and re-rendering should unbind old handler and bind new handler', agar_1.Chain.asStep({}, [
            Loader_1.cRender({ onSetContent: eventState.createHandler('InitialHandler') }),
            Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>Initial Content</p>')),
            Loader_1.cReRender({ onSetContent: eventState.createHandler('NewHandler') }),
            Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>New Content</p>')),
            eventState.cEach('InitialHandler', function (args) {
                return agar_1.Assertions.assertEq('Initial handler should have been unbound, hence initial content', '<p>Initial Content</p>', args[0].content);
            }),
            eventState.cEach('NewHandler', function (args) {
                return agar_1.Assertions.assertEq('New handler should have been bound, hence new content', '<p>New Content</p>', args[0].content);
            }),
            eventState.cClearState,
            Loader_1.cRemove
        ])),
        agar_1.Logger.t('Test value prop', agar_1.Chain.asStep({}, [
            Loader_1.cRender({ value: '<p>Initial Value</p>' }),
            Loader_1.cEditor(mcagar_1.ApiChains.cAssertContent('<p>Initial Value</p>')),
            Loader_1.cReRender({ value: '<p>New Value</p>' }),
            Loader_1.cEditor(mcagar_1.ApiChains.cAssertContent('<p>New Value</p>')),
            Loader_1.cRemove
        ])),
        agar_1.Logger.t('Test disabled prop', agar_1.Chain.asStep({}, [
            Loader_1.cRender({}),
            Loader_1.cEditor(agar_1.Chain.op(function (editor) {
                agar_1.Assertions.assertEq('Should be design mode', 'design', editor.mode.get());
            })),
            Loader_1.cReRender({ disabled: true }),
            Loader_1.cEditor(agar_1.Chain.op(function (editor) {
                agar_1.Assertions.assertEq('Should be readonly mode', 'readonly', editor.mode.get());
            })),
            Loader_1.cRemove
        ]))
    ], success, failure);
});
